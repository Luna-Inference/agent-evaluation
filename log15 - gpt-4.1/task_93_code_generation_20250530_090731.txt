
================================================================================
Task 93/183: Create a JavaScript class for a simple shopping cart with add, remove, and calculate total methods.
Category: Creative & Generation Tasks | Type: code-generation | Difficulty: medium
================================================================================

╭─────────────────────────────────────────────────────────────────────────────────── New run ───────────────────────────────────────────────────────────────────────────────────╮
│                                                                                                                                                                               │
│ Create a JavaScript class for a simple shopping cart with add, remove, and calculate total methods.                                                                           │
│                                                                                                                                                                               │
╰─ LiteLLMModel - azure/gpt-4.1 ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Step 1 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Output message of the LLM: ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Thought: I need to output a JavaScript class definition for a simple shopping cart with three methods: add, remove, and calculateTotal. Since this is a code generation task in  
JavaScript (not Python), I will prepare the code as a string and return it as my final answer.                                                                                   
                                                                                                                                                                                 
Code:                                                                                                                                                                            
```py                                                                                                                                                                            
cart_js = """                                                                                                                                                                    
class ShoppingCart {                                                                                                                                                             
    constructor() {                                                                                                                                                              
        this.items = [];                                                                                                                                                         
    }                                                                                                                                                                            
                                                                                                                                                                                 
    // Adds an item with name and price. Optionally specify quantity (default 1)                                                                                                 
    add(itemName, price, quantity = 1) {                                                                                                                                         
        // Check if item already in cart                                                                                                                                         
        const existing = this.items.find(item => item.name === itemName);                                                                                                        
        if (existing) {                                                                                                                                                          
            existing.quantity += quantity;                                                                                                                                       
        } else {                                                                                                                                                                 
            this.items.push({ name: itemName, price: price, quantity: quantity });                                                                                               
        }                                                                                                                                                                        
    }                                                                                                                                                                            
                                                                                                                                                                                 
    // Removes an item by name (or decrements quantity)                                                                                                                          
    remove(itemName, quantity = 1) {                                                                                                                                             
        const idx = this.items.findIndex(item => item.name === itemName);                                                                                                        
        if (idx !== -1) {                                                                                                                                                        
            if (this.items[idx].quantity > quantity) {                                                                                                                           
                this.items[idx].quantity -= quantity;                                                                                                                            
            } else {                                                                                                                                                             
                this.items.splice(idx, 1);                                                                                                                                       
            }                                                                                                                                                                    
        }                                                                                                                                                                        
    }                                                                                                                                                                            
                                                                                                                                                                                 
    // Calculates the total price of all items in the cart                                                                                                                       
    calculateTotal() {                                                                                                                                                           
        return this.items.reduce((total, item) => total + item.price * item.quantity, 0);                                                                                        
    }                                                                                                                                                                            
}                                                                                                                                                                                
"""                                                                                                                                                                              
final_answer(cart_js)                                                                                                                                                            
```                                                                                                                                                                              
 ─ Executing parsed code: ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 
  cart_js = """                                                                                                                                                                  
  class ShoppingCart {                                                                                                                                                           
      constructor() {                                                                                                                                                            
          this.items = [];                                                                                                                                                       
      }                                                                                                                                                                          
                                                                                                                                                                                 
      // Adds an item with name and price. Optionally specify quantity (default 1)                                                                                               
      add(itemName, price, quantity = 1) {                                                                                                                                       
          // Check if item already in cart                                                                                                                                       
          const existing = this.items.find(item => item.name === itemName);                                                                                                      
          if (existing) {                                                                                                                                                        
              existing.quantity += quantity;                                                                                                                                     
          } else {                                                                                                                                                               
              this.items.push({ name: itemName, price: price, quantity: quantity });                                                                                             
          }                                                                                                                                                                      
      }                                                                                                                                                                          
                                                                                                                                                                                 
      // Removes an item by name (or decrements quantity)                                                                                                                        
      remove(itemName, quantity = 1) {                                                                                                                                           
          const idx = this.items.findIndex(item => item.name === itemName);                                                                                                      
          if (idx !== -1) {                                                                                                                                                      
              if (this.items[idx].quantity > quantity) {                                                                                                                         
                  this.items[idx].quantity -= quantity;                                                                                                                          
              } else {                                                                                                                                                           
                  this.items.splice(idx, 1);                                                                                                                                     
              }                                                                                                                                                                  
          }                                                                                                                                                                      
      }                                                                                                                                                                          
                                                                                                                                                                                 
      // Calculates the total price of all items in the cart                                                                                                                     
      calculateTotal() {                                                                                                                                                         
          return this.items.reduce((total, item) => total + item.price * item.quantity, 0);                                                                                      
      }                                                                                                                                                                          
  }                                                                                                                                                                              
  """                                                                                                                                                                            
  final_answer(cart_js)                                                                                                                                                          
 ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 
Out - Final answer: 
class ShoppingCart {
    constructor() {
        this.items = [];
    }
    
    // Adds an item with name and price. Optionally specify quantity (default 1)
    add(itemName, price, quantity = 1) {
        // Check if item already in cart
        const existing = this.items.find(item => item.name === itemName);
        if (existing) {
            existing.quantity += quantity;
        } else {
            this.items.push({ name: itemName, price: price, quantity: quantity });
        }
    }
    
    // Removes an item by name (or decrements quantity)
    remove(itemName, quantity = 1) {
        const idx = this.items.findIndex(item => item.name === itemName);
        if (idx !== -1) {
            if (this.items[idx].quantity > quantity) {
                this.items[idx].quantity -= quantity;
            } else {
                this.items.splice(idx, 1);
            }
        }
    }
    
    // Calculates the total price of all items in the cart
    calculateTotal() {
        return this.items.reduce((total, item) => total + item.price * item.quantity, 0);
    }
}

[Step 1: Duration 2.42 seconds| Input tokens: 2,069 | Output tokens: 318]

Output:

class ShoppingCart {
    constructor() {
        this.items = [];
    }
    
    // Adds an item with name and price. Optionally specify quantity (default 1)
    add(itemName, price, quantity = 1) {
        // Check if item already in cart
        const existing = this.items.find(item => item.name === itemName);
        if (existing) {
            existing.quantity += quantity;
        } else {
            this.items.push({ name: itemName, price: price, quantity: quantity });
        }
    }
    
    // Removes an item by name (or decrements quantity)
    remove(itemName, quantity = 1) {
        const idx = this.items.findIndex(item => item.name === itemName);
        if (idx !== -1) {
            if (this.items[idx].quantity > quantity) {
                this.items[idx].quantity -= quantity;
            } else {
                this.items.splice(idx, 1);
            }
        }
    }
    
    // Calculates the total price of all items in the cart
    calculateTotal() {
        return this.items.reduce((total, item) => total + item.price * item.quantity, 0);
    }
}


Task 93 complete.
------------------------------------------------------------
